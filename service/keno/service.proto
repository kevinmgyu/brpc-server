syntax="proto2";
package bytetrade_pb;


option cc_generic_services = true;


message EchoRequest {
	required string message = 1;
}

message EchoResponse {
	required string message = 1;
}



message keno_game{
	required string received_transaction_id=1;
	required double received_time=2;
	required uint64 received_block_num=3;

	required string payout_transaction_id=4;
	required  double payout_time=5;
	required uint64 payout_block_num=6;

	required string block_hash=7;
	required string server_seed_hash=8;

	required string shoe=9;
	required string pick=10;
	required string hit=11;

	required string room_address=12;
	required string user_id=13;


	required uint32 asset_type=14;
	required string asset_name=15;
	required string amount=16;
	required int32 status=17;
	required bool win_or_lose=18;

	required string payout_user_id=19;
	required int32 pay_ratio=20;
	required string pay_out=21;

	required string external=22;
	required string channel=23;
	required uint32 bet_multiple=24;
	required string basic_amount=25;

}

message keno_list_request{
	required string method=1;
	repeated string params=2;
	required uint64 id=3;

}

message area{
	required int32 asset_type=1;
	required string asset_name=2;
	required string precision=3;
	repeated string transfer_amount = 4;

}


message room{
	required string address=1 ;
	required string channel=2;
	required string contract_id=3;
	repeated area areas=4;
}
message keno_list_response_result{
	repeated room rooms = 1;
}

message keno_list_response {
        optional int32 code=1;
        optional string message=2;
        optional keno_list_response_result result=3;
}


message keno_query_request{
	required string method=1;
	repeated string params=2;
	required uint64 id=3;


}

message keno_query_response_result{

	optional string received_transaction_id=2;
	optional double received_time=3;
	optional string shoe=4;
	optional string pick=5;
	optional string hit=6;

	optional string room_address=7;
	optional string user_id=8;
	optional int32 asset_type=9;
	optional string amount=10;

	optional int32 status=11;
	optional bool win_or_lose=12;
	optional int32 pay_ratio=13;
	optional string pay_out=14;

}

message keno_query_response {
	optional int32 code=1;
	optional string message=2;
	optional keno_query_response_result result=3;
}
message keno_newest_trasaction_request {
	required string method=1;
        repeated int32 params=2;
        required uint64 id=3;
}

message keno_newest_trasaction_response_result {
	required string received_transaction_id=1;
	required double received_time=2;
	required int32 received_block_num=3;
	required string block_hash=4;
	required string server_seed_hash=5;
	required string shoe=6;
	required string pick=7;
	required string hit=8;
	required string room_address=9;
	required string user_id=10;
	required int32 asset_type=11;
	required string amount=12;
	required int32 status=13;
	required bool win_or_lose=14;
	optional string payout_transaction_id =15;
	optional double payout_time =16;
	optional int32  payout_block_num =17;
	optional string payout_user_id =18;
	optional int32  pay_ratio =19;
	optional string pay_out =20;

	
}
message keno_newest_trasaction_response {
	optional int32 code=1;
	optional string message=2;
	repeated keno_newest_trasaction_response_result result=3;
}

message keno_my_tra_param {
	optional string user_id =1;
	optional int32 asset_type =2;
	optional int32 offset = 3;
	optional int32 limit = 4;
}
message keno_my_trasaction_request {
        required string method=1;
        repeated keno_my_tra_param  params=2;
        required uint64 id=3;
}
message keno_my_trasaction_response_result {
        optional string received_transaction_id=1;
        optional double received_time=2;
        optional int32 received_block_num=3;
        optional string block_hash=4;
        optional string server_seed_hash=5;
        optional string shoe=6;
        optional string pick=7;
        optional string hit=8;
        optional string room_address=9;
        optional string user_id=10;
        optional int32 asset_type=11;
        optional string amount=12;
        optional int32 status=13;
        optional bool win_or_lose=14;
        optional string payout_transaction_id =15;
        optional double payout_time =16;
        optional int32  payout_block_num =17;
        optional string payout_user_id =18;
        optional int32  pay_ratio =19;
        optional string pay_out =20;


}


message keno_my_trasaction_response {
	 optional int32 code=1;
        optional string message=2;
        repeated keno_my_trasaction_response_result result=3;
}

message keno_query_block_seed_request {
        required string method=1;
        repeated uint64  params=2;
        required uint64 id=3;
}

message keno_query_block_seed_response_result {
        required string server_seed_hash=1;
        required string seed=2;
        required string seed_hash_transaction=3;
        required string seed_transaction=4;
}

message keno_query_block_seed_response {
         optional int32 code=1;
        optional string message=2;
        optional keno_query_block_seed_response_result result=3;
}

message keno_query_block_seed_list_request {
        required string method=1;
        repeated int32  params=2;
        required uint64 id=3;
}

message keno_query_block_seed_list_response_result {
	required string server_seed_hash = 1;
	required string seed = 2;
	required int32  start = 3;
	required int32  end = 4;
	required string seed_hash_transaction = 5;
	required string seed_transaction = 6;
}

message keno_query_block_seed_list_response {
         optional int32 code=1;
        optional string message=2;
        repeated keno_query_block_seed_list_response_result result=3;
}

service BytetradeService {
	rpc Echo2(EchoRequest) returns (EchoResponse);


	rpc process_keno_list(keno_list_request)  returns(keno_list_response);
	rpc process_keno_query(keno_query_request)  returns(keno_query_response);
	rpc get_new_transactions(keno_newest_trasaction_request)  returns(keno_newest_trasaction_response);
	rpc get_my_transactions(keno_my_trasaction_request)  returns(keno_my_trasaction_response);
	rpc get_my_transactions_use_sqlpp(keno_my_trasaction_request)  returns(keno_my_trasaction_response);
	rpc get_block_seed_list(keno_query_block_seed_list_request)  returns(keno_query_block_seed_list_response);
	rpc get_block_seed(keno_query_block_seed_request)  returns(keno_query_block_seed_response);
	rpc get_block_seed_use_sqlpp11(keno_query_block_seed_request)  returns(keno_query_block_seed_response);

}

