// generated by ./ddl2cpp create_keno.sql ../sqlpp_keno brpc_sqlpp
#ifndef BRPC_SQLPP_SQLPP_KENO_H
#define BRPC_SQLPP_SQLPP_KENO_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace brpc_sqlpp
{
  namespace Received_
  {
    struct ReceivedTransactionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "received_transaction_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T receivedTransactionId;
            T& operator()() { return receivedTransactionId; }
            const T& operator()() const { return receivedTransactionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ReceivedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "received_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T receivedTime;
            T& operator()() { return receivedTime; }
            const T& operator()() const { return receivedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ReceivedBlockNum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "received_block_num";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T receivedBlockNum;
            T& operator()() { return receivedBlockNum; }
            const T& operator()() const { return receivedBlockNum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct PayoutTransactionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "payout_transaction_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T payoutTransactionId;
            T& operator()() { return payoutTransactionId; }
            const T& operator()() const { return payoutTransactionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct PayoutTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "payout_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T payoutTime;
            T& operator()() { return payoutTime; }
            const T& operator()() const { return payoutTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PayoutBlockNum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "payout_block_num";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T payoutBlockNum;
            T& operator()() { return payoutBlockNum; }
            const T& operator()() const { return payoutBlockNum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct BlockHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "block_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blockHash;
            T& operator()() { return blockHash; }
            const T& operator()() const { return blockHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct ServerSeedHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "server_seed_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T serverSeedHash;
            T& operator()() { return serverSeedHash; }
            const T& operator()() const { return serverSeedHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Shoe
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shoe";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shoe;
            T& operator()() { return shoe; }
            const T& operator()() const { return shoe; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Pick
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pick";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pick;
            T& operator()() { return pick; }
            const T& operator()() const { return pick; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Hit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hit;
            T& operator()() { return hit; }
            const T& operator()() const { return hit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct RoomAddress
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "room_address";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roomAddress;
            T& operator()() { return roomAddress; }
            const T& operator()() const { return roomAddress; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct AssetType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "asset_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assetType;
            T& operator()() { return assetType; }
            const T& operator()() const { return assetType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct AssetName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "asset_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assetName;
            T& operator()() { return assetName; }
            const T& operator()() const { return assetName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amount;
            T& operator()() { return amount; }
            const T& operator()() const { return amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct WinOrLose
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "win_or_lose";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T winOrLose;
            T& operator()() { return winOrLose; }
            const T& operator()() const { return winOrLose; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct PayoutUserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "payout_user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T payoutUserId;
            T& operator()() { return payoutUserId; }
            const T& operator()() const { return payoutUserId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct HandType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hand_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T handType;
            T& operator()() { return handType; }
            const T& operator()() const { return handType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PayRatio
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pay_ratio";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T payRatio;
            T& operator()() { return payRatio; }
            const T& operator()() const { return payRatio; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PayOut
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pay_out";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T payOut;
            T& operator()() { return payOut; }
            const T& operator()() const { return payOut; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct External
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "external";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T external;
            T& operator()() { return external; }
            const T& operator()() const { return external; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Channel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "channel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T channel;
            T& operator()() { return channel; }
            const T& operator()() const { return channel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  } // namespace Received_

  struct Received: sqlpp::table_t<Received,
               Received_::ReceivedTransactionId,
               Received_::ReceivedTime,
               Received_::ReceivedBlockNum,
               Received_::PayoutTransactionId,
               Received_::PayoutTime,
               Received_::PayoutBlockNum,
               Received_::BlockHash,
               Received_::ServerSeedHash,
               Received_::Shoe,
               Received_::Pick,
               Received_::Hit,
               Received_::RoomAddress,
               Received_::UserId,
               Received_::AssetType,
               Received_::AssetName,
               Received_::Amount,
               Received_::Status,
               Received_::WinOrLose,
               Received_::PayoutUserId,
               Received_::HandType,
               Received_::PayRatio,
               Received_::PayOut,
               Received_::External,
               Received_::Channel>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "received";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T received;
        T& operator()() { return received; }
        const T& operator()() const { return received; }
      };
    };
  };
} // namespace brpc_sqlpp
#endif
